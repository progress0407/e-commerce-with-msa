import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.7'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.7.22'
}

allprojects {

    group = 'msa-with-ddd'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = JavaVersion.VERSION_17.toString()
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'java-test-fixtures'

    bootJar.enabled = true
    jar.enabled = true

    dependencies {
        // Kotlin
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        testImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
        testFixturesImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
        testImplementation 'io.kotest:kotest-assertions-core:5.8.0'
        testFixturesImplementation 'io.kotest:kotest-assertions-core:5.8.0'
        // Kotlin logging
        implementation 'io.github.microutils:kotlin-logging:3.0.5'
        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        // Actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        // Yaml Auto Complete
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }

    ext {
        set('springCloudVersion', "2022.0.2")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    tasks.test {
        useJUnitPlatform()
    }

    allOpen {
        annotation("jakarta.persistence.Entity")
        annotation("jakarta.persistence.Embeddable")
        annotation("jakarta.persistence.MappedSuperclass")
    }
}

/*
subprojects { project ->
    if (project.name in [':user', ':item', ':order']) {
        apply from: rootProject.file('module-dependencies/micro-service.gradle')
        dependencies {
            implementation project(':common')
        }
    }
}
*/

subprojects { project ->

//    println "## project = $project.name" // for debug
    if (!(project.name in ['common', 'eureka', 'api-gateway'])) {
//        println "## (if inner clause) project = $project.name" // for debug
        apply from: rootProject.file('module-dependencies/micro-service.gradle')

        dependencies {

//            implementation project(':common')
//            testImplementation testFixtures(project(':common'))
        }
    }
}


project(':eureka') {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'

        implementation project(':common:general')
        testImplementation testFixtures(project(':common:general'))
    }
}

project(':api-gateway') {
    dependencies {
        // Router
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'

        // Service Registry Client
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

        implementation project(':common:general')
        testImplementation testFixtures(project(':common:general'))
    }
}

project(':user') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        // Spring Security core for BCrypt
        implementation 'org.springframework.security:spring-security-core'

        // jjwt
        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
        implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        implementation project(':common:general')
        testImplementation testFixtures(project(':common:general'))
    }
}

project(':coupon') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {

        implementation project(':common:general')
        testImplementation testFixtures(project(':common:general'))

        implementation project(':common:rest-client')
        testImplementation testFixtures(project(':common:rest-client'))
    }
}

project(':item') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        implementation project(':common:general')
        implementation project(':common:rest-client')
        implementation project(':common:event')
        testImplementation testFixtures(project(':common:general'))
    }
}

project(':order') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        implementation project(':common:general')
        implementation project(':common:rest-client')
        implementation project(':common:event')
        testImplementation testFixtures(project(':common:general'))
    }
}

project(':common:general') {
    bootJar.enabled = false
    jar.enabled = true

    apply from: rootProject.file('module-dependencies/micro-service.gradle')

    dependencies {
        testFixturesImplementation 'org.springframework.boot:spring-boot-starter-web'
        testFixturesImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testFixturesImplementation 'org.springframework.boot:spring-boot-starter-test'
        testFixturesImplementation 'io.rest-assured:rest-assured'
    }
}
