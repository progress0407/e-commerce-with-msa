import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.7'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
}

allprojects {

    group = 'msa-with-ddd'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

//    bootJar.enabled = false
//    jar.enabled = true

    repositories {
        mavenCentral()
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = JavaVersion.VERSION_17.toString()
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'

    dependencies {
        // Kotlin
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        testImplementation 'io.kotest:kotest-runner-junit5:5.8.0'
        testImplementation 'io.kotest:kotest-assertions-core:5.8.0'
        // Kotlin logging
        implementation 'io.github.microutils:kotlin-logging:3.0.5'
        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        // Actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
    }

    ext {
        set('springCloudVersion', "2022.0.2")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

//subprojects { project ->
//    if (project.name in [':user', ':item', ':order']) {
//        apply from: rootProject.file('module-dependencies/micro-service.gradle')
//        dependencies {
//            implementation project(':common')
//        }
//    }
//}

project(':eureka') {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    }
}

project(':api-gateway') {
    dependencies {
        // Router
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'

        // Service Registry Client
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    }
}

project(':user') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        // Spring Security core for BCrypt
        implementation 'org.springframework.security:spring-security-core'

        // jjwt
        implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

        implementation project(':common')
    }

    tasks.test {
        useJUnitPlatform()
    }
}

project(':coupon') {
    bootJar.enabled = true
    jar.enabled = true
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        implementation project(':common')
    }
}

project(':item') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        implementation project(':common')
    }
}

project(':order') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
    dependencies {
        implementation project(':common')
    }
}

project(':common') {
    apply from: rootProject.file('module-dependencies/micro-service.gradle')
}

